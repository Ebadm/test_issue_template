name: Generate Changelog on PR to Main

on:
  pull_request:
    branches:
      - main
    types:
      - opened
      - synchronize

# Add these permissions
permissions:
  contents: write
  pull-requests: write

jobs:
  changelog:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Get Version from Constants
        id: get_version
        run: |
          npm install -g ts-node typescript @types/node
          
          # Create tsconfig.json
          echo '{
            "compilerOptions": {
              "module": "commonjs",
              "esModuleInterop": true,
              "allowJs": true,
              "resolveJsonModule": true,
              "moduleResolution": "node",
              "types": ["node"]
            }
          }' > tsconfig.json
          
          # Create getVersion.ts with a fallback version
          echo '/// <reference types="node" />
          try {
            const { getLatestVersion } = require("./src/constants/versionHistory");
            process.stdout.write("v" + getLatestVersion());
          } catch (error) {
            console.error("Error loading version:", error);
            process.stdout.write("v0.0.1");
          }' > getVersion.ts
          
          VERSION=$(ts-node --prefer-ts-exts --files getVersion.ts)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          rm getVersion.ts tsconfig.json

      - name: Set up Git
        run: |
          git config --global user.name "Ebadm"
          git config --global user.email "ebad@huq.io"

      - name: Get commits between staging and main
        run: |
          git fetch origin main
          git fetch origin staging
          
          commits=$(git log --oneline origin/main..origin/staging --grep="feat:\|fix:")
          
          if [ -z "$commits" ]; then
            echo "No relevant commits found."
            exit 0
          fi

          current_date=$(date '+%Y-%m-%d')

          # Initialize changelog with the version header using the version from constants
          changelog="# ${{ steps.get_version.outputs.version }} [${current_date}]\n\n"

          # Separate commits into Features and Fixes
          features=""
          fixes=""

          while read -r commit; do
            hash=$(echo "$commit" | cut -d' ' -f1)
            message=$(echo "$commit" | sed -E 's/^[a-f0-9]{7} //')
            if [[ "$message" =~ ^feat: ]]; then
              features="$features- $message ([${hash}](https://github.com/${GITHUB_REPOSITORY}/commit/${hash}))\n"
            elif [[ "$message" =~ ^fix: ]]; then
              fixes="$fixes- $message ([${hash}](https://github.com/${GITHUB_REPOSITORY}/commit/${hash}))\n"
            fi
          done <<< "$commits"

          if [ -n "$features" ]; then
            changelog="$changelog## Features\n$features\n"
          fi

          if [ -n "$fixes" ]; then
            changelog="$changelog## Fixes\n$fixes\n"
          fi

          if [ ! -f CHANGELOG.md ]; then
            echo -e "$changelog" > CHANGELOG.md
          else
            cat CHANGELOG.md > temp.md
            echo -e "$changelog" > CHANGELOG.md
            cat temp.md >> CHANGELOG.md
            rm temp.md
          fi

      - name: Commit and push changes
        run: |
          git checkout staging
          git add CHANGELOG.md
          git diff --staged --quiet CHANGELOG.md || git commit -m "Update changelog for ${{ steps.get_version.outputs.version }}"
          git push origin staging
